// ==========================================================================
// ## TOOLS: FUNCTIONS
// ==========================================================================
@use 'sass:math';

/// @content Function that converts the given pixel value to its EM quivalent.
@function em($size) {
    @if (type-of($size) == number) {
        @if (unit($size) != 'px') {
        @error "`#{$size}` needs to be a pixel value.";
        }
    } @else {
        @error "`#{$size}` needs to be a number.";
    }

  @return math.div($size, $font-base-size) * 1em;
}

/// @content Function that converts the given pixel value to its REM quivalent.
@function rem($size) {
    @if (type-of($size) == number) {
        @if (unit($size) != 'px') {
        @error "`#{$size}` needs to be a pixel value.";
        }
    } @else {
        @error "`#{$size}` needs to be a number.";
    }

  @return math.div($size, $font-base-size) * 1rem;
}

@function breakpoint-next(
    $name,
    $breakpoints: $breakpoints,
    $breakpoint-names: map-keys($breakpoints)
) {
    $n: index($breakpoint-names, $name);
    @return if(
        $n < length($breakpoint-names),
        nth($breakpoint-names, $n + 1),
        null
    );
}

@function breakpoint-min($name, $breakpoints: $breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min !=0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 1, null);
}
